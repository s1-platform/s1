<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2013 Pykhov Gregory
  ~
  ~
  -->

<map:cfg
        xmlns:l="http://s1-platform.org/config/types/Long"
        xmlns:i="http://s1-platform.org/config/types/Integer"
        xmlns:f="http://s1-platform.org/config/types/Float"
        xmlns:d="http://s1-platform.org/config/types/Double"
        xmlns:bd="http://s1-platform.org/config/types/BigDecimal"
        xmlns:bi="http://s1-platform.org/config/types/BigInteger"
        xmlns:dt="http://s1-platform.org/config/types/Date"
        xmlns:b="http://s1-platform.org/config/types/Boolean"
        xmlns:map="http://s1-platform.org/config/types/Map"
        xmlns:list="http://s1-platform.org/config/types/List"

        collection="accounts"
        class="org.s1.mongodb.table.MongoDBTable"
        >

    <map:schema>
        <list:attributes>
            <map:e name="title" label="Title" type="String" appearance="required"></map:e>
            <map:e name="balance" label="Balance" type="Double" appearance="required">
                <validate><![CDATA[
                        if(data<0)
                            return "Balance is less than 0";
                        ]]></validate>
            </map:e>
        </list:attributes>
    </map:schema>

    <enrichRecord><![CDATA[
            //enrich
            if(context.operations){
                record.incoming = [];
                tables.list("operations",record.incoming, null, {node:{field:"dest.id",operation:"equals",value:record.id}}, null, null, 0, 0, {validate:true, expand:true, deep:false});
                record.outcoming = [];
                tables.list("operations",record.outcoming, null, {node:{field:"src.id",operation:"equals",value:record.id}}, null, null, 0, 0, {validate:true, expand:true, deep:false});
            }
            ]]></enrichRecord>

    <list:actions>
        <map:e name="add" label="Add" to="present">
            <map:schema>
                <list:attributes>
                    <map:e name="title" label="Title" type="String" appearance="required"></map:e>
                    <map:e name="balance" label="Balance" type="Double" appearance="required"></map:e>
                </list:attributes>
            </map:schema>
        </map:e>
        <map:e name="pay" label="Pay" from="present" to="present" b:log="false">
            <before><![CDATA[
                    if(data.sum > 0 && data.sum > oldRecord.balance)
                        throw "Not enough balance";

                    //dest
                    tables.changeState("accounts",data.dest.id,"setBalance",{sum:-data.sum},null);
                    ]]></before>
            <after><![CDATA[
                    //add operation
                    var dt = {src:{id:oldRecord.id}, dest:{id:data.dest.id}, sum:data.sum};
                    tables.changeState("operations",null,"add",dt,null);
                    ]]></after>
            <merge><![CDATA[
                    s1.clear(newRecord);
                    s1.putAll(newRecord,oldRecord);
                    newRecord.balance -= data.sum;
                    ]]></merge>
            <lock><![CDATA[
                    var dest = s1.get(data,'dest.id','')
                    if(id>dest){
                        return id+dest;
                    }else{
                        return dest+id;
                    }
                    ]]></lock>
            <map:schema>
                <list:attributes>
                    <map:e name="dest" label="Destination account" type="ComplexType" appearance="required" typeClass="org.s1.table.JoinType">
                        <map:typeCfg table="accounts"></map:typeCfg>
                    </map:e>
                    <map:e name="sum" label="Sum" type="Double" appearance="required"></map:e>
                </list:attributes>
            </map:schema>
        </map:e>
        <map:e name="plusBalance" label="Plus balance" from="present" to="present" b:log="false">
            <before><![CDATA[
                    var s = data.sum;
                    s1.clear(data);

                    data.balance = oldRecord.balance + s;
                    if(data.balance<0)
                        throw "Not enough balance";
                    ]]></before>
            <map:schema>
                <list:attributes>
                    <map:e name="sum" label="Sum" type="Double" appearance="required"></map:e>
                </list:attributes>
            </map:schema>
        </map:e>
    </list:actions>

    <list:states>
        <map:e name="present" label="Present"></map:e>
    </list:states>

</map:cfg>