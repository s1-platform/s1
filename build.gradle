/**
 * Group, version
 */
allprojects{
    group = 'org.s1-platform'
    version = '2.4.0-SNAPSHOT'
}

/**
 * Libraries
 */
ext {
    port= 9999
    stopPort= 9998
}
ext.libs = [
        testng : 'org.testng:testng:6.8.8',
        groovy : 'org.codehaus.groovy:groovy-all:2.2.2',
        tomcat_core : 'org.apache.tomcat.embed:tomcat-embed-core:8.0.5',
        tomcat_logging : 'org.apache.tomcat.embed:tomcat-embed-logging-log4j:8.0.5',
        tomcat_jasper : 'org.apache.tomcat.embed:tomcat-embed-jasper:8.0.5',
        httpclient : 'org.apache.httpcomponents:httpclient:4.2.5',
        httpmime : 'org.apache.httpcomponents:httpmime:4.2.5',
        commons_io : 'commons-io:commons-io:2.4',
        slf4j : 'org.slf4j:slf4j-api:1.7.5',
        log4j : 'log4j:log4j:1.2.17',
        slf4j_log4j : 'org.slf4j:slf4j-log4j12:1.7.5',
        rhino : 'org.mozilla:rhino:1.7R4',
        hazelcast : 'com.hazelcast:hazelcast:3.1.5',
        servlet : 'javax.servlet:javax.servlet-api:3.0.1',
        mongodb : 'org.mongodb:mongo-java-driver:2.11.3',
        xerces : 'xerces:xercesImpl:2.11.0',
        jcommander : 'com.beust:jcommander:1.35'
]

/**
 * Common compile, build, tasks
 */
subprojects {
    apply plugin: 'java'

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    compileJava.sourceCompatibility = 1.7
    compileJava.targetCompatibility = 1.7
    compileTestJava.sourceCompatibility = 1.7
    compileTestJava.targetCompatibility = 1.7

    //main
    sourceSets {
        main {
            java {
                srcDir 'src/java'
            }
            resources {
                srcDir 'src/resources'
            }
        }
        test {
            java {
                srcDir 'test/java'
            }
            resources {
                srcDir 'test/resources'
            }
        }
    }

    //provided-compile configuration
    configurations { providedCompile }

    sourceSets.main.compileClasspath += configurations.providedCompile
    sourceSets.test.compileClasspath += configurations.providedCompile
    sourceSets.test.runtimeClasspath += configurations.providedCompile

    //maven repos
    repositories {
        mavenLocal()
        mavenCentral()
    }

    //javadoc
    javadoc{
        options.encoding = "UTF-8"
    }
}

/**
 * Local tests common configuration
 */
configure(subprojects.findAll {it.name.startsWith('test-local')}) {

    dependencies {
        compile project(':s1-testing')
        compile project(':s1-core')
    }
    testClassesDir=sourceSets.main.output.classesDir
    test{
        useTestNG()

        classpath = configurations.compile
        classpath += configurations.runtime
        classpath += files("$buildDir/classes/main")
        classpath += files("$buildDir/resources/main")

        //s1 options home
        systemProperty 's1.ConfigHome', "classpath:/config"

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }
    }
    test.dependsOn classes
    test.dependsOn testClasses
    test.dependsOn cleanTest
}

/**
 * Server tests common configuration
 */
import org.apache.tools.ant.taskdefs.condition.Os

configure(subprojects.findAll {it.name.startsWith('test-server')}) {
    configurations { tomcat }

    dependencies {
        testCompile project(':s1-testing')
        compile project(':s1-core')
        providedCompile libs.servlet
        tomcat project(':s1-tomcat-embedded')
    }

    task tomcatRun(type: JavaExec) {
        main = "org.s1.tomcat.TomcatMain"
        args = ["start", "localhost", port, "/$project.name", "$projectDir/webapp", stopPort, 'shutdown' ]
        classpath = configurations.tomcat
        classpath += configurations.compile
        classpath += configurations.runtime
        classpath += files("$buildDir/classes/main")
        classpath += files("$buildDir/resources/main")
        systemProperties([
                "s1.ConfigHome": "${projectDir}/config",
                "file.encoding": "UTF-8"
        ])
    }
    rootProject.subprojects.each{
        tomcatRun.dependsOn(tasks.getByPath(":${it.name}:classes"))
    }

    task tomcatStop(type: JavaExec) {
        main = "org.s1.tomcat.TomcatMain"
        args = ['stop',"localhost",stopPort,"shutdown"]
        classpath = configurations.tomcat
    }

    task tomcatStart(type:ExecWait) {
        if (Os.isFamily(Os.FAMILY_WINDOWS))
            command "cmd /c gradlew.bat --no-color --no-daemon -q :${project.name}:tomcatRun"
        else if(Os.isFamily(Os.FAMILY_UNIX))
            command "./gradlew --no-color --no-daemon -q :${project.name}:tomcatRun"
        ready = "TestAppServer: Server started"
        directory "${projectDir}/../.."

        doLast {
            println("### SERVER STARTED")
        }
    }

    test {
        useTestNG()

        classpath = configurations.testCompile
        classpath += configurations.testRuntime
        classpath += configurations.compile
        classpath += configurations.runtime
        classpath += files("$buildDir/classes/main")
        classpath += files("$buildDir/resources/main")
        classpath += files("$buildDir/classes/test")
        classpath += files("$buildDir/resources/test")

        //s1 options home
        systemProperty 's1.ConfigHome', "classpath:/config"
        systemProperty 's1test.http.host', "localhost"
        systemProperty 's1test.http.port', "${port}"
        systemProperty 's1test.http.context', "/${project.name}"

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        beforeSuite {
            tomcatStart.execute();
        }

        afterSuite {
            tomcatStop.execute();
        }

    }
    test.dependsOn classes
    test.dependsOn testClasses
    test.dependsOn cleanTest
}

/**
 * Maven modules common configuration
 */
configure(subprojects.findAll {it.name.startsWith('s1-')}) {
    apply plugin: 'maven'
    apply plugin: 'signing'

    dependencies {
        compile libs.slf4j
        compile libs.log4j
        runtime libs.slf4j_log4j
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    //sign only if mavenCentralUser/mavenCentralPassword present
    if(hasProperty('mavenCentralUser') && hasProperty('mavenCentralPassword')) {
        signing {
            sign configurations.archives
        }
    }
    uploadArchives {
        doFirst {
            if(project.version.endsWith('-SNAPSHOT'))
                throw new Exception("Cannot upload SNAPSHOT version");
        }
        repositories {
            mavenDeployer {
                configuration = configurations.archives

                //sign only if mavenCentralUser/mavenCentralPassword present
                if(hasProperty('mavenCentralUser') && hasProperty('mavenCentralPassword')) {
                    beforeDeployment { MavenDeployment deployment ->
                        signPom(deployment)
                    }
                }

                //~/.gradle/gradle.properties
                repository(url: "http://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    if(hasProperty('mavenCentralUser') && hasProperty('mavenCentralPassword'))
                        authentication(userName: mavenCentralUser, password: mavenCentralPassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description

                    url 'http://s1-platform.org'
                    inceptionYear '2013'

                    parent {
                        groupId 'org.sonatype.oss'
                        artifactId 'oss-parent'
                        version '7'
                    }

                    scm {
                        url 'https://github.com/s1-platform/s1'
                        connection 'scm:git:ssh://github.com/s1-platform/s1.git'
                        developerConnection 'scm:git:git+ssh://git@github.com/s1-platform/s1.git'
                        tag 'HEAD'
                    }

                    issueManagement {
                        system 'GitHub Issue Management'
                        url 'https://github.com/s1-platform/s1/issues'
                    }

                    ciManagement {
                        system 'Travis CI'
                        url 'https://travis-ci.org/s1-platform/s1/'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'p-gregory'
                            name 'Grigory Pykhov'
                            email 's.one.platform@gmail.com'
                            roles {
                                role 'Owner'
                                role 'Architect'
                                role 'Developer'
                            }
                            timezone '+4'
                        }
                        developer {
                            id 'ekaterina-p'
                            name 'Ekaterina Pykhova'
                            roles {
                                role 'Developer'
                            }
                            timezone '+4'
                        }
                    }
                }
            }
        }
    }
}

/**
 * Test all
 */

/**
 * Exec some process and wait until it starts
 */
class ExecWait extends DefaultTask {
    String command
    String ready
    String directory

    @TaskAction
    def spawnProcess() {

        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new
                InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
        stdout.close();
        System.setOut(new PrintStream(new OutputStream() {
            public void write(int b) {
                //DO NOTHING
            }
        }));
        System.setErr(new PrintStream(new OutputStream() {
            public void write(int b) {
                //DO NOTHING
            }
        }));
    }
}
