/**
 * Group, version
 */
allprojects{
    group = 'org.s1-platform'
    version = '2.4.0-SNAPSHOT'
}

/**
 * Libraries
 */
ext {
    port= 9999
    stopPort= 9998
}
ext.libs = [
        testng : 'org.testng:testng:6.8.8',
        groovy : 'org.codehaus.groovy:groovy-all:2.2.2',
        tomcat_core : 'org.apache.tomcat.embed:tomcat-embed-core:8.0.5',
        tomcat_logging : 'org.apache.tomcat.embed:tomcat-embed-logging-log4j:8.0.5',
        tomcat_jasper : 'org.apache.tomcat.embed:tomcat-embed-jasper:8.0.5',
        httpclient : 'org.apache.httpcomponents:httpclient:4.2.5',
        httpmime : 'org.apache.httpcomponents:httpmime:4.2.5',
        commons_io : 'commons-io:commons-io:2.4',
        slf4j : 'org.slf4j:slf4j-api:1.7.5',
        log4j : 'log4j:log4j:1.2.17',
        slf4j_log4j : 'org.slf4j:slf4j-log4j12:1.7.5',
        rhino : 'org.mozilla:rhino:1.7R4',
        hazelcast : 'com.hazelcast:hazelcast:3.1.5',
        servlet : 'javax.servlet:javax.servlet-api:3.0.1',
        mongodb : 'org.mongodb:mongo-java-driver:2.11.3',
        xerces : 'xerces:xercesImpl:2.11.0',
        jcommander : 'com.beust:jcommander:1.35'
]
ext.servers = [
        core : [
                classpath : [],
                webapp : "${projectDir}/test_webapp",
                options : "classpath:/options"
        ],
        core_mongodb : [
                classpath : [],
                webapp : "${projectDir}/test_webapp",
                options : "classpath:/options"
        ]
]
ext.integrationTests = [

]
ext.serverTests = [
        core : [
                classpath : [

                ],
                options : "classpath:/options",
                server : "core"
        ],
        mongodb : [
                classpath : [
                        ':s1-mongodb:compile',':s1-mongodb:testCompile'
                ],
                options : "classpath:/options",
                server : "core_mongodb"
        ]
]

/**
 * Common compile, build, tasks
 */
subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    compileJava.sourceCompatibility = 1.7
    compileJava.targetCompatibility = 1.7
    compileTestJava.sourceCompatibility = 1.7
    compileTestJava.targetCompatibility = 1.7

    configurations { providedCompile }

    sourceSets.main.compileClasspath += configurations.providedCompile
    sourceSets.test.compileClasspath += configurations.providedCompile
    sourceSets.test.runtimeClasspath += configurations.providedCompile

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile libs.slf4j
        compile libs.log4j
        runtime libs.slf4j_log4j
    }

    javadoc{
        options.encoding = "UTF-8"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    //sign only if mavenCentralUser/mavenCentralPassword present
    if(hasProperty('mavenCentralUser') && hasProperty('mavenCentralPassword')) {
        signing {
            sign configurations.archives
        }
    }
    uploadArchives {
        doFirst {
            if(project.version.endsWith('-SNAPSHOT'))
                throw new Exception("Cannot upload SNAPSHOT version");
        }
        repositories {
            mavenDeployer {
                configuration = configurations.archives

                //sign only if mavenCentralUser/mavenCentralPassword present
                if(hasProperty('mavenCentralUser') && hasProperty('mavenCentralPassword')) {
                    beforeDeployment { MavenDeployment deployment ->
                        signPom(deployment)
                    }
                }

                //~/.gradle/gradle.properties
                repository(url: "http://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    if(hasProperty('mavenCentralUser') && hasProperty('mavenCentralPassword'))
                        authentication(userName: mavenCentralUser, password: mavenCentralPassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description

                    url 'http://s1-platform.org'
                    inceptionYear '2013'

                    parent {
                        groupId 'org.sonatype.oss'
                        artifactId 'oss-parent'
                        version '7'
                    }

                    scm {
                        url 'https://github.com/s1-platform/s1'
                        connection 'scm:git:ssh://github.com/s1-platform/s1.git'
                        developerConnection 'scm:git:git+ssh://git@github.com/s1-platform/s1.git'
                        tag 'HEAD'
                    }

                    issueManagement {
                        system 'GitHub Issue Management'
                        url 'https://github.com/s1-platform/s1/issues'
                    }

                    ciManagement {
                        system 'Travis CI'
                        url 'https://travis-ci.org/s1-platform/s1/'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'p-gregory'
                            name 'Grigory Pykhov'
                            email 's.one.platform@gmail.com'
                            roles {
                                role 'Owner'
                                role 'Architect'
                                role 'Developer'
                            }
                            timezone '+4'
                        }
                        developer {
                            id 'ekaterina-p'
                            name 'Ekaterina Pykhova'
                            roles {
                                role 'Developer'
                            }
                            timezone '+4'
                        }
                    }
                }
            }
        }
    }
}

import org.apache.tools.ant.taskdefs.condition.Os
/**
 * S1 Core
 */
project(':s1-core'){
    description 'S1 core'

    dependencies {
        compile libs.hazelcast
        compile libs.rhino
        providedCompile libs.servlet
        testCompile project(':s1-testing')
    }

    task tomcatRun(type: JavaExec, dependsOn: compileJava) {
        main = "org.s1.testing.tomcat.TomcatMain"
        args = ["start", "localhost", port, "/$project.name", "$projectDir/src/test/resources/webapp", stopPort, 'shutdown' ]
        classpath = configurations.testCompile
        classpath += files("$buildDir/classes/main")
        classpath += files("$buildDir/classes/test")
        classpath += files("$projectDir/src/main/resources")
        classpath += configurations.compile
        classpath += configurations.runtime
        classpath += files("$projectDir/src/test/resources")
        systemProperties([
                "s1.ConfigHome": "${projectDir}/src/test/resources/options",
                "fileEncoding": "UTF-8",
                "file.encoding": "UTF-8"
        ])
        /*main = "org.eclipse.jetty.runner.Runner"
        args = ["--path", "/$project.name", "--port", port, "--stop-port", stopPort, "--stop-key", 'jetty', "$projectDir/src/main/webapp"]
        classpath = configurations.jettyRun
        classpath += files("$buildDir/classes/main")
        classpath += files("$projectDir/src/main/resources")
        classpath += configurations.compile
        classpath += configurations.runtime
        classpath += files("$projectDir/src/test/resources")
        systemProperties([
                "s1.ConfigHome": "${projectDir}/../ugi48-options",
                "fileEncoding": "UTF-8",
                "file.encoding": "UTF-8",
                "jetty.home": "${projectDir}/jetty-home"
        ])*/
    }

    task tomcatStop(type: JavaExec) {
        main = "org.s1.testing.tomcat.TomcatMain"
        //args = ["--stop-port", 9998, "--stop-key",'jetty', '--stop']
        args = ['stop',"localhost",stopPort,"shutdown"]
        classpath = configurations.testCompile
        /*main = "org.eclipse.jetty.start.Main"
        //args = ["--stop-port", 9998, "--stop-key",'jetty', '--stop']
        args = ['--stop']
        classpath = configurations.jettyStop
        systemProperties([
                "STOP.PORT": stopPort,
                "STOP.KEY": "jetty"
        ])*/
    }

    task startServer(type:ExecWait) {
        if (Os.isFamily(Os.FAMILY_WINDOWS))
            command 'cmd /c gradlew.bat tomcatRun'
        else if(Os.isFamily(Os.FAMILY_UNIX))
            command './gradlew jettyRun'
        ready = ["TestAppServer: Server started"]
        directory "$projectDir/.."

        doLast {
            println("### SERVER STARTED")
        }
    }

    task stopServer(type:Exec) {
        workingDir '..'
        if (Os.isFamily(Os.FAMILY_WINDOWS))
            commandLine 'cmd', '/c', 'gradlew.bat','tomcatStop'
        else if(Os.isFamily(Os.FAMILY_UNIX))
            commandLine './gradlew','tomcatStop'

        doLast {
            println("### SERVER STOPPED")
        }
    }

    test {
        useTestNG()

        //s1 options home
        //systemProperty 's1.ConfigHome', "${projectDir}/src/test/resources/options"

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        beforeSuite {
            startServer.execute();
            //project(':eds-ws').jettyRun.execute()
        }

        afterSuite {
            stopServer.execute();
            //project(':eds-ws').jettyStop.execute()
        }
    }
    test.dependsOn cleanTest
}

/**
 * S1 MongoDB
 */
project(':s1-mongodb'){
    description 'S1 MongoDB'
    dependencies {
        compile libs.mongodb
        compile project(':s1-core')
        providedCompile libs.servlet
        testCompile project(':s1-testing')
    }
}

/**
 * S1 Testing
 */
project(':s1-testing'){
    description 'S1 testing utils'
    dependencies {
        compile libs.testng
        compile libs.groovy
        compile libs.tomcat_core
        compile libs.tomcat_logging
        compile libs.tomcat_jasper
        compile libs.httpclient
        compile libs.httpmime
        providedCompile libs.servlet
    }
}

import groovy.text.SimpleTemplateEngine
/**
 * S1 XSD Utils
 */
project(':s1-xsd-utils'){
    description 'S1 XSD utils'
    apply plugin:'application'
    mainClassName = "org.s1.xsdutils.Main"

    dependencies {
        compile libs.xerces
        compile project(':s1-core')
        compile libs.jcommander
        testCompile project(':s1-testing')
    }

    //expand template (standard way using `expand` is not applicable because of charset)
    def expandFile = {path, ctx->
        def file = new File(path);
        def text = file.text
        def engine = new SimpleTemplateEngine()
        template = engine.createTemplate(text).make(ctx);
        file.withWriter('UTF-8'){ it << template.toString() }
    }

    //clean home
    task cleanHome << {
        new File("$buildDir/home").deleteDir();
    }

    //copy home
    task copyApp(type: Copy) {
        from ('app'){
            //exclude('README.*')
        }
        from('../'){
            include('S1-*.txt')
        }
        into 'build/app'
        includeEmptyDirs = true
    }
    copyApp.dependsOn cleanHome

    //process templates
    task processTemplates<<{
        expandFile("$buildDir/app/README.txt",[project:project]);
    }
    processTemplates.dependsOn copyApp

    //distribute zip
    distZip {
        into(project.name) {
            from 'build/app/'
            include '**/*'
            into "$project.name-$project.version"
        }
    }
    distZip.dependsOn processTemplates

    //add conf to classpath
    startScripts {
        classpath += files('REPLACE_WITH_CONF')
        doLast {
            def windowsScriptFile = file getWindowsScript()
            def unixScriptFile    = file getUnixScript()
            windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\REPLACE_WITH_CONF', '%APP_HOME%\\conf')
            unixScriptFile.text  = unixScriptFile.text.replace('$APP_HOME/lib/REPLACE_WITH_CONF', '$APP_HOME/conf')
        }
    }
}

/*--------------------------------------------------*/
/* CUSTOM TASKS */
/*--------------------------------------------------*/

class ExecWait extends DefaultTask {
    String command
    List<String> ready
    String directory

    @TaskAction
    def spawnProcess() {

        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new
                InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (ready.find{return line.contains(it)}) {
                println "$command is ready"
                break;
            }
        }
    }
}